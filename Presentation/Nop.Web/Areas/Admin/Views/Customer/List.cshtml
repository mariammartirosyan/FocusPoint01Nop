@*@model CustomerPermissionsModel.CustomerSearchModel*@
@model CustomersAndRolePermissions
 
@using System.Globalization;
@using Nop.Core.Domain.Media;
@using Nop.Services.Security;

@inject MediaSettings _mediaSettings

@{
    //page title
    ViewBag.Title = T("Admin.Customers.Customers").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Customers list");
}

@{
    StandardPermissionProvider standardPermissionProvider = new StandardPermissionProvider();
    const string hideSearchBlockAttributeName = "CustomerListPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<form asp-controller="Customer" asp-action="List" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Customers.Customers")
        </h1>
        <div class="pull-right">
            <a asp-action="Create" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                @T("Admin.Common.AddNew")
            </a>
            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    @T("Admin.Common.Export")
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="exportxml-all">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportxml-selected">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.Selected")
                        </button>
                    </li>
                    <li class="divider"></li>
                    <li>
                        <button type="submit" name="exportexcel-all">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportexcel-selected">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.Selected")
                        </button>
                    </li>
                </ul>
                @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.CustomerListButtons })
            </div>
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                            <div class="search-text">@T("Admin.Common.Search")</div>
                            <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                            <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                        </div>
                        <div class="search-body @(hideSearchBlock ? "closed" : "")">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="@Model.CustomerSearchModel.SearchEmail" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="@Model.CustomerSearchModel.SearchEmail" />
                                        </div>
                                    </div>
                                    @if (Model.CustomerSearchModel.UsernamesEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="@Model.CustomerSearchModel.SearchUsername" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="@Model.CustomerSearchModel.SearchUsername" />
                                            </div>
                                        </div>
                                    }
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="@Model.CustomerSearchModel.SearchFirstName" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="@Model.CustomerSearchModel.SearchFirstName" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="@Model.CustomerSearchModel.SearchLastName" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="@Model.CustomerSearchModel.SearchLastName" />
                                        </div>
                                    </div>
                                    @if (@Model.CustomerSearchModel.DateOfBirthEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="@Model.CustomerSearchModel.SearchDayOfBirth" />
                                            </div>
                                            <div class="col-md-8">
                                                @{
                                                    var monthOfBirthValues = new List<SelectListItem>();
                                                    monthOfBirthValues.Add(new SelectListItem { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Month").Text, Value = "0" });
                                                    for (var i = 1; i <= 12; i++)
                                                    {
                                                        monthOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                    }
                                                    var dayOfBirthValues = new List<SelectListItem>();
                                                    dayOfBirthValues.Add(new SelectListItem { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Day").Text, Value = "0" });
                                                    for (var i = 1; i <= 31; i++)
                                                    {
                                                        dayOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                    }
                                                }
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <nop-select asp-for="@Model.CustomerSearchModel.SearchMonthOfBirth" asp-items="@monthOfBirthValues" />
                                                    </div>
                                                    <div class="col-md-6">
                                                        <nop-select asp-for="@Model.CustomerSearchModel.SearchDayOfBirth" asp-items="@dayOfBirthValues" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="col-md-7">
                                    @if (@Model.CustomerSearchModel.CompanyEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="@Model.CustomerSearchModel.SearchCompany" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="@Model.CustomerSearchModel.SearchCompany" />
                                            </div>
                                        </div>
                                    }
                                    @if (@Model.CustomerSearchModel.PhoneEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="@Model.CustomerSearchModel.SearchPhone" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="@Model.CustomerSearchModel.SearchPhone" />
                                            </div>
                                        </div>
                                    }
                                    @if (@Model.CustomerSearchModel.ZipPostalCodeEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="@Model.CustomerSearchModel.SearchZipPostalCode" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="@Model.CustomerSearchModel.SearchZipPostalCode" />
                                            </div>
                                        </div>
                                    }
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="@Model.CustomerSearchModel.SearchIpAddress" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="@Model.CustomerSearchModel.SearchIpAddress" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="@Model.CustomerSearchModel.SelectedCustomerRoleIds" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="@Model.CustomerSearchModel.SelectedCustomerRoleIds" asp-items="@Model.CustomerSearchModel.AvailableCustomerRoles" asp-multiple="true" />
                                            <script>
                                            $(document).ready(function() {
                                                var rolesIdsInput =
                                                    $('#@Html.IdFor(model => model.CustomerSearchModel.SelectedCustomerRoleIds)')
                                                        .data("kendoMultiSelect");
                                                rolesIdsInput.setOptions({
                                                    autoClose: false,
                                                    filter: "contains"
                                                });

                                                @if (@Model.CustomerSearchModel.AvailableCustomerRoles.Count == 0)
                                                {
                                                    <text>
                                                        rolesIdsInput.setOptions({
                                                            enable: false,
                                                            placeholder:
                                                                '@T("Admin.Catalog.Products.CustomerRoles.NoCustomerRolesAvailable")'
                                                        });
                                                        rolesIdsInput._placeholder();
                                                        rolesIdsInput._enable();
                                                    </text>
                                                }
                                            });
                                            </script>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-7 col-md-offset-5">
                                    <button type="button" id="search-customers" class="btn btn-primary btn-search">
                                        <i class="fa fa-search"></i>
                                        @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        @{ var gridModel = new DataTablesModel
                            {
                                Name = "customers-grid",
                                UrlRead = new DataUrl("CustomerList", "Customer", null),
                                SearchButtonId = "search-customers",
                                Length = @Model.CustomerSearchModel.PageSize,
                                LengthMenu = @Model.CustomerSearchModel.AvailablePageSizes,
                                Filters = new List<FilterParameter>
                                                                            {
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SelectedCustomerRoleIds)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchEmail)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchUsername)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchFirstName)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchLastName)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchDayOfBirth)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchMonthOfBirth)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchCompany)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchPhone)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchZipPostalCode)),
                                    new FilterParameter(nameof(Model.CustomerSearchModel.SearchIpAddress)),
                                }
                            };

                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Id))
                            {
                                IsMasterCheckBox = true,
                                Render = new RenderCheckBox("checkbox_customers"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Width = "50",
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Email))
                            {
                                Title = T("Admin.Customers.Customers.Fields.Email").Text,
                                Width = "200"
                            });
                            if (Model.CustomerSearchModel.AvatarEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.AvatarUrl))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Avatar").Text,
                                    Width = "100",
                                    Render = new RenderPicture()
                                });
                            }
                            if (Model.CustomerSearchModel.UsernamesEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Username))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Username").Text,
                                    Width = "200"
                                });
                            }
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.FullName))
                            {
                                Title = T("Admin.Customers.Customers.Fields.FullName").Text,
                                Width = "200"
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.CustomerRoleNames))
                            {
                                Title = T("Admin.Customers.Customers.Fields.CustomerRoles").Text,
                                Width = "200"
                            });
                            if (Model.CustomerSearchModel.CompanyEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Company))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Company").Text,
                                    Width = "200"
                                });
                            }
                            if (Model.CustomerSearchModel.PhoneEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Phone))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Phone").Text,
                                    Width = "200"
                                });
                            }
                            if (Model.CustomerSearchModel.ZipPostalCodeEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.ZipPostalCode))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.ZipPostalCode").Text,
                                    Width = "200"
                                });
                            }
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Active))
                            {
                                Title = T("Admin.Customers.Customers.Fields.Active").Text,
                                Width = "100",
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Render = new RenderBoolean()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.CreatedOn))
                            {
                                Title = T("Admin.Customers.Customers.Fields.CreatedOn").Text,
                                Width = "200",
                                Render = new RenderDate()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.LastActivityDate))
                            {
                                Title = T("Admin.Customers.Customers.Fields.LastActivityDate").Text,
                                Width = "200",
                                Render = new RenderDate()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Id))
                            {
                                Title = T("Admin.Common.Edit").Text,
                                Width = "100",
                                ClassName = NopColumnClassDefaults.Button,
                                Render = new RenderButtonEdit(new DataUrl("Edit"))
                            }); }
                        @await Html.PartialAsync("Table", gridModel)
                    </div>


                    @*<div class="panel-body">
                        @{
                            var gridModel2 = new DataTablesModel
                            {
                                Name = "customers-grid2",
                                UrlRead = new DataUrl("CustomerPermissionsList", "Customer", null),
                                SearchButtonId = "search-customers",
                                Length = Model.CustomerSearchModel.PageSize,
                                LengthMenu = Model.CustomerSearchModel.AvailablePageSizes,
                                Filters = new List<FilterParameter>
                                                                                                {
                                    new FilterParameter(nameof(Model.SelectedCustomerRoleIds)),
                                    new FilterParameter(nameof(Model.SearchEmail)),
                                    new FilterParameter(nameof(Model.SearchUsername)),
                                    new FilterParameter(nameof(Model.SearchFirstName)),
                                    new FilterParameter(nameof(Model.SearchLastName)),
                                    new FilterParameter(nameof(Model.SearchDayOfBirth)),
                                    new FilterParameter(nameof(Model.SearchMonthOfBirth)),
                                    new FilterParameter(nameof(Model.SearchCompany)),
                                    new FilterParameter(nameof(Model.SearchPhone)),
                                    new FilterParameter(nameof(Model.SearchZipPostalCode)),
                                    new FilterParameter(nameof(Model.SearchIpAddress)),
                                }
                            };

                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Id))
                            {
                                IsMasterCheckBox = true,
                                Render = new RenderCheckBox("checkbox_customers1"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Width = "50",
                            });
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Email))
                            {
                                Title = T("Admin.Customers.Customers.Fields.Email").Text,
                                Width = "200"
                            });

                            if (Model.UsernamesEnabled)
                            {
                                gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Username))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Username").Text,
                                    Width = "200"
                                });
                            }
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.FullName))
                            {
                                Title = T("Admin.Customers.Customers.Fields.FullName").Text,
                                Width = "200"
                            });
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(StandardPermissionProvider.ContactCanPlaceOrders))
                            {
                                Render = new RenderCheckBox("checkbox_ContactCanPlaceOrders"),
                                ClassName = NopColumnClassDefaults.Button,
                                Title = "ContactCanPayOrders",
                                Width = "200"
                            });
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(StandardPermissionProvider.ContactCanReOrder))
                            {
                                Render = new RenderCheckBox("checkbox_ContactCanReOrder"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Title = "ContactCanPayOrders",
                                Width = "200"
                            });
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(StandardPermissionProvider.ContactCanSeeOrders))
                            {
                                Render = new RenderCheckBox("checkbox_ContactCanSeeOrders"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Title = "ContactCanPayOrders",
                                Width = "200"
                            });
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(StandardPermissionProvider.ContactCanPayOrders))
                            {
                                Render = new RenderCheckBox("checkbox_ContactCanPayOrders"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Title = "ContactCanPayOrders",
                                Width = "200"
                            });
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(StandardPermissionProvider.ContactCanSeeInvoices))
                            {
                                Render = new RenderCheckBox("checkbox_ContactCanSeeInvoices"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Title = "ContactCanSeeInvoices",
                                Width = "200"
                            });
                            gridModel2.ColumnCollection.Add(new ColumnProperty(nameof(StandardPermissionProvider.ContactCanPayInvoices))
                            {
                                Render = new RenderCheckBox("checkbox_ContactCanPayInvoices"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Title = "ContactCanPayInvoices",
                                Width = "200",
                            });

                            gridModel2.ColumnCollection.Add(
                                   new ColumnProperty(nameof(CustomerModel.Id))
                                   {
                                       Title = "Save",
                                       Width = "100",
                                       ClassName = NopColumnClassDefaults.Button,
                                       Render = new RenderButtonEdit(new DataUrl("EditPermissions"))
                                                       //EditType = EditType.Checkbox
                                                   }
                                  );

                        }
                        @await Html.PartialAsync("Table", gridModel2)
                    </div>*@

                </div>
            </div>
        </div>
    </div>
</form>


@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Customer" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>
<script>
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-xml-selected-form #selectedIds').val(ids);
            $('#export-xml-selected-form').submit();
            updateTable('#customers-grid');
            return false;
        });
    });
</script>

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Customer" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>
<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-excel-selected-form #selectedIds').val(ids);
            $('#export-excel-selected-form').submit();
            updateTable('#customers-grid');
            return false;
        });
    });
</script>



<form asp-controller="Customer" asp-action="SavePermissions" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Configuration.ACL")
        </h1>
        <div class="pull-right">
            <button type="submit" name="save" class="btn bg-blue">
                <i class="fa fa-floppy-o"></i>
                @T("Admin.Common.Save")
            </button>
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.PermissionListButtons })
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <p>
                            @T("Admin.Configuration.ACL.Description")
                        </p>
                        @*@if (Model.AvailablePermissions.Count == 0)
                        {
            <text>No permissions defined</text> }
                        else if (Model.AvailableCustomerRoles.Count == 0)
                        {
            <text>No customer roles available</text> }
                        else
                        {
            <script>
                                $(document).ready(function () {
                                    @foreach (var cr in Model.AvailableCustomerRoles)
                                    {
                                        <text>
                                    $('#selectall-@(cr.Id)').click(function () {
                                        $('.allow_@(cr.Id)').attr('checked', $(this).is(':checked')).change();
                                    });

                                    </text>
                                    }
                                });
            </script>*@
                            <div class="scroll-wrapper">
                                <table class="table table-hover table-bordered">
                                    <thead>
                                        <tr>
                                            <th scope="col">
                                                <strong>CustomerEmail</strong>
                                            </th>
                                            <th scope="col">
                                                <strong>CustomerName</strong>
                                            </th>
                                            @foreach (var pm in standardPermissionProvider.GetPermissions().Where(p => p.SystemName.Contains("Contact")))
                                            {
                                                <th scope="col">
                                                    <div class="checkbox">
                                                        <label>
                                                            <input type="checkbox" id="selectall-@(@pm.SystemName)" />
                                                            <strong>@pm.SystemName</strong>
                                                        </label>
                                                    </div>
                                                </th>
                                             }
                                        </tr>
                                    </thead>

                                    <tbody>
                                       
                                        <tr>
                                            <td>
                                                <span>@Model.CustomerSearchModel.SearchEmail</span>
                                            </td>
                                            <td>
                                                <span>@Model.CustomerSearchModel.SearchFirstName</span>
                                            </td>
                                            @*@foreach (permissions pm in Model.PermissionMappingModel.AvailablePermissions.Where(p => p.SystemName.Contains("Contact")))
                                            {
                                                var isChecked = pm.Id
                                            }*@
                                                @*@foreach (var contactPermission in Model.AvailableCustomerRoles)
            {
                var allowed = Model.Allowed.ContainsKey(pr.SystemName) && Model.Allowed[pr.SystemName][cr.Id];
                <td>
                    <input class="allow_@(cr.Id)" type="checkbox" value="@(pr.SystemName)" name="allow_@(cr.Id)" @(allowed ? " checked=checked" : null) />
                </td>
            }*@
                                            </tr>
                                    </tbody>
                                </table>
                            </div>}
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>